#!/usr/bin/env bash
#
# **** License ****
#
# Copyright (C) 2017 by Helm Rock Consulting
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# **** End License ****
#
# Author: Neil Beadle
# Adds RFC2136 DDNS templates to the EdgeOS based Edge Routers

# Uncomment for debugging or syntax checking
# Syntax check - uncomment these 4 lines below for non execution dry run:
# set -n
# source ./bash_debug_function.sh
# s_dbg on verbose
# DEBUG=Yes

VERSION="1.2"

APTPATH="/etc/apt"
APTSRCLST="sources.list"
BASE_DIR="/config"
CONFIG="config.boot"
DEBUG_SH="bash_debug_function.sh"
ERROR=0
INSTALLER="setup"
ME="${0##*/}: "
PKGs="dnsutils curl rfc2136.dynamic.dns" # Add packages needed separated by a space
POST_CFG_DIR="${BASE_DIR}/scripts/post-config.d"
POST_CFG_SCRIPT="Install_RFC2136"
POSTINSTALL="Install_RFC2136"
RFC2136_CMDS="rfc2136_cfg_cmds"
RFC2136_VY_CFG="rfc2136.dynamic.dns"
RM_RFC2136="Remove_RFC2136"
TARGET="${BASE_DIR}/user-data/RFC2136"
TITLE="Install Dynamic DNS (DDNS) RFC 2136 integration v${VERSION}"

# Load shell functions
source ./shell_functions

# Set up the Vyatta environment
source /opt/vyatta/etc/functions/script-template
OPRUN=/opt/vyatta/bin/vyatta-op-cmd-wrapper
CFGRUN=/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper
API=/bin/cli-shell-api
shopt -s expand_aliases

alias AddImage='${OPRUN} add system image'
alias begin='${CFGRUN} begin'
alias cleanup='${CFGRUN} cleanup'
alias comment='${CFGRUN} comment'
alias commit='${CFGRUN} commit'
alias copy='${CFGRUN} copy'
alias delete='${CFGRUN} delete'
alias DeleteImage='/usr/bin/ubnt-upgrade --delete-noprompt'
alias discard='${CFGRUN} discard'
alias end='${CFGRUN} end'
alias load='${CFGRUN} load'
alias rename='${CFGRUN} rename'
alias save='sudo ${CFGRUN} save'
alias set='${CFGRUN} set'
alias show='${API} showConfig'
alias showddns=/opt/vyatta/bin/sudo-users/vyatta-op-dynamic-dns.pl
alias version='${OPRUN} show version'

alias bold='tput bold'
alias normal='tput sgr0'
alias reverse='tput smso'
alias underline='tput smul'

alias black='tput setaf 0'
alias blink='tput blink'
alias blue='tput setaf 4'
alias cyan='tput setaf 6'
alias green='tput setaf 2'
alias lime='tput setaf 190'
alias magenta='tput setaf 5'
alias powder='tput setaf 153'
alias purple='tput setaf 171'
alias red='tput setaf 1'
alias tan='tput setaf 3'
alias white='tput setaf 7'
alias yellow='tput setaf 3'
alias ansi='sed -r "s/\[(.[^]]*)\]/\[$(cyan)\1$(normal)\]/g"'

SHOWVER=$(version | sed 's/$/;/g')
BUILD=$(echo ${SHOWVER} | awk 'BEGIN {RS=";"} /Build ID:/ {print $3}')
VER=$(echo ${SHOWVER} | awk 'BEGIN {RS=";"} /Version:/ {print $2}')
HNAME=$(hostname -s)
WANIF=$(ip route get 8.8.8.8 | awk -F"dev " 'NR==1 {split($2,a," ");print a[1]}') # Find out if we have a connected Internet accessible WAN interface

# Setup the echo_logger function
echo_logger ()
{
local MSG=
	shopt -s checkwinsize
	COLUMNS=$(tput cols)

	case "${1}" in
		E)
			shift
			MSG="[$(red)$(bold)ERROR$(normal)]: ${@}"
			LOG="[ERROR]: ${@}";;
		F)
			shift
			MSG="[$(red)$(bold)FAILED$(normal)]: ${@}"
			LOG="[FAILED]: ${@}";;
		FE)
			shift
			MSG="[$(red)$(bold)FATAL ERROR$(normal)]: ${@}"
			LOG="[FATAL]: ${@}";;
		I)
			shift
			MSG="[$(blue)$(bold)INFO$(normal)]: ${@}"
			LOG="[INFO]: ${@}";;
		S)
			shift
			MSG="[$(green)$(bold)OK$(normal)]: ${@}"
			LOG="[OK]: ${@}";;
		T)
			shift
			MSG="[$(tan)$(bold)TRYING$(normal)]: ${@}"
			LOG="[TRYING]: ${@}";;
		W)
			shift
			MSG="[$(yellow)$(bold)WARNING$(normal)]: ${@}"
			LOG="[WARNING]: ${@}";;
		*)
			echo "ERROR: usage: echo_logger MSG TYPE(E, F, FE, I, S, T, W) MSG."
			exit 1;;
	esac

	MSG=$(echo "${MSG}" | ansi)
	let COLUMNS=${#MSG}-${#@}+${COLUMNS}
	echo "${MSG}" | fold -sw ${COLUMNS}
	logger -t ${ME} "${LOG}"
}

# Function to output command status of success or failure to screen and log
try ()
{
	[[ ${DEBUG} ]] && echo_logger T "[${@}]..."
	if eval ${@}
	then
		echo_logger									S "[${@}]."
		return 0
	else
		echo_logger									E "[${@}] unsuccessful!"
		return 1
	fi
}

Internet ()
{
	if sudo curl -D- -o /dev/null -s http://www.google.com 2>&1> /dev/null
	then
		return 0
	else
		return 1
	fi
}

# Check version and set up environment
Check_Version ()
{
	# ER-Lite
	# v1.2.0:						build 4574253
	# v1.4.1:						build 4648309
	# v1.5.0:						build 4677648
	# v1.6.0:						build 4716006
	# v1.7.0:						build 4783374
	# v1.8.0:						build 4853089
	# v1.8.5:						build 4884695
	# v1.9.0:						build 4901118
	# v1.9.1:						build 4939093
	# v1.9.1.1:					build 4977347
	# v1.9.7:						build 5001798
	# v1.9.7+hotfix:		build 5005851
	# v1.9.7+hotfix.2:	build 5001798
	# v1.9.7+hotfix.3:	build 5013619
	# v1.9.7+hotfix.4:	build 5024004

	# ER-X
	# v1.9.7+hotfix.4:	build 5024279

	# UniFi Security Gateway
	# v4.3.49:					build 5001153 USG
	# v4.4.8:						build 5023698 USG

	if [[ ${BUILD} > 5024004 ]]		# Script is tested on builds > OS v1.7.1
	then
		return 1
	elif [[ ${BUILD} < 4783374 ]] # OS must be upgraded
	then
		return 2
	else
		return 0
	fi
}

# Make sure we clean up session on deliberate and accidental exits
atexit ()
{
	end
# 	print_line \*
# 	echo
}

# Install the rfc2136.dynamic.dns templates in /opt/vyatta/share/vyatta-cfg/templates
Install_RFC2136_Support ()
{
CWD=$(pwd)
BASE="${CWD}/rfc2136.dynamic.dns"
DCLN="usr/sbin/ddclient"
VDIR="opt/vyatta/sbin"
VSCR="vyatta-dynamic-dns.pl"
VCFG="opt/vyatta/share/vyatta-cfg/templates"
TLVL="service/dns"
local i=0
ERROR=0

# 	print_line \*
	echo_logger I "Backing up /${DCLN} to /${DCLN}.bak"
	try sudo cp "/${DCLN}" "/${DCLN}.bak"
	echo_logger I "Installing ${BASE}/${DCLN} to /${DCLN}"
	try sudo install -o root -g root -m 0755 "${BASE}/${DCLN}" "/${DCLN}"
	echo_logger I "Backing up /${VDIR}/${VSCR} to /${VDIR}/${VSCR}.bak"
	try sudo cp "/${VDIR}/${VSCR}" "/${VDIR}/${VSCR}.bak"
	echo_logger I "Installing ${BASE}/${VDIR}/${VSCR} /${VDIR}"
	try sudo install -o root -g root -m 0755 "${BASE}/${VDIR}/${VSCR}" "/${VDIR}"
	echo_logger I "Adding ${TITLE} to EdgeOS [${VER}] configuration templates..."
	try sudo cp -rf "${BASE}/${VCFG}/${TLVL}/dynamic/ /${VCFG}/${TLVL}"
	try sudo chown -R root:vyattacfg "/${VCFG}"

	return ${ERROR}
}

# Check to see if the rfc2136 templates have been installed
Check_RFC2136_Template ()
{
	if [[ -d /opt/vyatta/share/vyatta-cfg/templates/service/dns/dynamic/interface/node.tag/rfc2136/ ]]
	then
		return 0
	else
		return 1
	fi
}

#update apt repository
apt_get_Update ()
{
local i=1
ERROR=1

# 	print_line \*
	echo_logger I "Updating Debian package repository."
	# apt-get upgrades sometimes suffer from transient errors caused by main server updates, so retry 3 times with 10s sleep

	while [ ${i} -lt 3 ]; do
		((i++))
		if try sudo apt-get -qq update
		then
			i=3
			ERROR=0
			echo_logger I "Debian package repository update complete."
		else
			sleep 10
		fi
	done
	# Exit status may still be bad, so advise
	if [[ ${ERROR} = 1 ]]
	then
		echo_logger FE "Problem updating package repository online (check connectivity), please run script again in 5 minutes."
		exit 1
	fi
}

# Make sure required packages, RFC 2136 keys and DDNS configuration are maintained across upgrades
Set_Persistence ()
{
CWD=$(pwd)
ERROR=0

# 	print_line \*
	echo_logger I "Setting up EdgeOS router upgrade persistence..."
	if [[ ! -d "${POST_CFG_DIR}" ]]
	then
		try sudo install -d -o root -g vyattacfg -m 0755 "${POST_CFG_DIR}/"
	fi

	if [[ ! -d "${TARGET}" ]]
	then
		try sudo install -d -o root -g vyattacfg -m 0755 "${TARGET}"
	fi

	try sudo cp -rf "${CWD}/${RFC2136_VY_CFG}" "${TARGET}/"
	try sudo install -o root -g vyattacfg -m 0755 "${APTPATH}/${APTSRCLST}" "${TARGET}/${APTSRCLST}"
	try sudo install -o root -g vyattacfg -m 0755 "${CWD}/${DEBUG_SH}" "${TARGET}/${DEBUG_SH}"
	try sudo install -o root -g vyattacfg -m 0755 "${CWD}/${INSTALLER}" "${TARGET}/${INSTALLER}"
	[[ -f "${POST_CFG_DIR}/${POST_CFG_SCRIPT}" ]] || try sudo install -o root -g vyattacfg -m 0755 "${CWD}/${POSTINSTALL}" "${POST_CFG_DIR}/${POST_CFG_SCRIPT}"
	try sudo install -o root -g vyattacfg -m 0755 "${CWD}/${RM_RFC2136}" "${TARGET}/${RM_RFC2136}"

	return ${ERROR}
}

# Add packages routine, note that the rfc2136.dynamic.dns isn't a real package, so we handle it differently
Add_Pkgs ()
{
DNSver="1:9.8.4.dfsg.P1-6+nmu2+deb7u6" # dnsutils package version that works correctly with ddclient 3.8.3
GETDNSver=$(version added | awk -F ' ' '/dnsutils/ {print $3}') # Find the installed dnsutils package version
PATCHDIR=$(pwd)
PKGS=''

	# Make sure rfc2136_integration directory exists
	if [[ ! -d "/var/lib/rfc2136_integration" ]]
	then
		echo_logger I "Creating [/var/lib/rfc2136_integration]..."
		if ! try sudo install -d -o root -g vyattacfg -m 0755 /var/lib/rfc2136_integration
		then
			echo_logger W "Unable to create [/var/lib/rfc2136_integration], attempting to repair..."
			echo_logger I "Removing [/var/lib/rfc2136_integration]..."
			if try rm -rf /var/lib/rfc2136_integration
			then
				echo_logger I "Automatic repair: creating [/var/lib/rfc2136_integration]"
				if ! try sudo install -d -o root -g vyattacfg -m 0755 /var/lib/rfc2136_integration
				then
					echo_logger W "Unable to create [/var/lib/rfc2136_integration]!"
				else
					echo_logger I "Directory [/var/lib/rfc2136_integration] created"
				fi
				echo_logger I "Automatic repair of [/var/lib/rfc2136_integration] complete."
			fi
		fi
	fi

# 	print_line \*
	if [[ -f "/var/lib/rfc2136_integration/debian.wheezy.repo" && $(grep wheezy ${APTPATH}/${APTSRCLST} 2>&1 /dev/null) ]]
	then
		echo_logger I "Debian Wheezy [${APTPATH}/${APTSRCLST}] is up to date."
	else
		echo_logger I "Adding debian repositories to [${APTPATH}/${APTSRCLST}]."
		# > v1.6.0 uses wheezy
		try begin
		if (grep squeeze ${APTPATH}/${APTSRCLST} 2>&1 /dev/null)
		then
			echo_logger I "EdgeOS [${VER}] firmware uses Debian [wheezy], deleting [squeeze] repository configuration..."
			try delete system package repository
		fi
		echo_logger I "This firmware uses Debian [wheezy], updating repository configuration..."
		try delete system package repository # clean out any references to Debian security updates as MIPS64 Wheezy no longer supported
		try set system package repository wheezy components "'main contrib non-free'"
		try set system package repository wheezy distribution wheezy
		try set system package repository wheezy url http://http.us.debian.org/debian
		try commit
		try save
		try end

		[ -f /var/lib/rfc2136_integration/debian.wheezy.repo ] || \
		try sudo touch /var/lib/rfc2136_integration/debian.wheezy.repo
	fi

	# Set up packages to install
	# Iterate through dependencies and add those required to install list
	for i in ${PKGs}; do
		case ${i} in
			"dnsutils")
				if [[ ! $(which ${i} > /dev/null) && ! -f "/var/lib/rfc2136_integration/${i}" ]]
				then
					PKGS="${PKGS} ${i}"
					echo_logger I "Adding [${i}] package to install list..."
				else
					# Since nsupdate is already installed, we need to make sure it isn't the version that has the mem.c assert bug with ddclient - unless proven otherwise, we don't mind it being the latest version
					if [[ ${GETDNSver} != ${DNSver} ]]
					then
						PKGS="${PKGS} ${i}"
						echo_logger I "Adding [${i}] package to install list..."
					fi
				fi;;
			"rfc2136.dynamic.dns")
				if [[ ! -f "/var/lib/rfc2136_integration/${i}" || ! Check_RFC2136_Template ]]
				then
					echo_logger I "Adding [${i}] package to install list..."
					if ! Install_RFC2136_Support
					then
						echo_logger W "Unable to install [${i}] package."
					else
						try sudo touch /var/lib/rfc2136_integration/${i}
						echo_logger I "Package [${i}] installed."
					fi
				fi;;
				*)
				if [[ ! $(which ${i} > /dev/null) && ! -f "/var/lib/rfc2136_integration/${i}" ]]
				then
					PKGS="${PKGS} ${i}"
					echo_logger I "Adding [${i}] package to install list..."
				fi;;
		esac
	done

	if [[ "${PKGS}" != '' ]]
	then
		apt_get_Update
		echo_logger I "The following package(s) will be installed: [${PKGS}]..."
		for PKG in ${PKGS}
		do
			echo_logger I "Installing [${PKG}] package."
			if [[ ! -f "/var/lib/rfc2136_integration/${PKG}" ]]
			then
				if ! try sudo apt-get -f -qq -y install ${PKG}
				then
					echo_logger W "Unable to install package [${PKG}]."
					if [[ ${PKG} = "dnsutils" ]]
					then
						echo_logger W "[${PKG}] requires the fixed version of [/usr/bin/nsupdate], in order for [ddclient] to update the DDNS IP address, try running [sudo apt-get -f install dnsutils] after the install completes."
					fi
				else
					try sudo touch /var/lib/rfc2136_integration/${PKG}
					echo_logger S "[${PKG}] package installed."
				fi
			else
				echo_logger I "[${PKG}] package already installed."
			fi
		done
		echo_logger I "Installation of [${PKGS}] completed."
		if [[ -f ${TARGET}/${CONFIG} && $(pwd) == ${POST_CFG_DIR} ]]
		then
			echo_logger I "Restoring ${TITLE} pre-install configuration"
			try cp ${TARGET}/${CONFIG} ${BASE_DIR}/${CONFIG}
		fi
	fi
}

rfc2136_bkp()
{
	try begin
	echo_logger I "Backing up RFC 2136 configuration..."
	try run show configuration commands | match rfc2136 > ${TARGET}/${RFC2136_CMDS}
	try commit
	try save
	try end
}

rfc2136_rst()
{
	try begin
	echo_logger I "Restoring up RFC 2136 configuration..."
	try source "${TARGET}/${RFC2136_CMDS}"
	try commit
	try save
	try end
}

main()
{
	print_line \*
	echo_logger I "${ME}Installing EdgeOS Router ${TITLE}..."
	print_line \*

	# If we're as running post configuration, then back up RFC 2136 configuration
	if [[ $(pwd) == "${POST_CFG_DIR}" ]]
	then
		rfc2136_bkp
		print_line \*
	fi

	if [[ -f /var/lib/rfc2136_integration/ddns.configured ]]
	then
		echo_logger I "${ME}EdgeOS Router ${TITLE} already configured, exiting!"
	fi
	Check_Version
	case ${?} in
		0)
			echo_logger I "EdgeOS [${VER}] detected, firmware is compatible."
			# Check for existing packages and install any required
			Add_Pkgs
			[[ "$(pwd)" == "${POST_CFG_DIR}" ]] || Set_Persistence
			;;
		1)
			echo_logger FE "EdgeOS [${VER}] detected, [>v1.7.0] firmware required, upgrade and re-run ${ME}."
			exit 1
			;;
		*)
			echo_logger FE "This shouldn't happen, so we're exiting just in case!"
			exit 1
	esac

	print_line \*
	echo

	# If we're as running post configuration, then restore RFC 2136 configuration
	if [[ $(pwd) == "${POST_CFG_DIR}" ]]
	then
		rfc2136_rst
		print_line \*
	fi
}

# This is where we run the script using the above functions
trap atexit exit ${?}

main
